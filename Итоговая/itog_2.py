import numpy as np


class vijDech:
    "Шифр Виженера модуль дешефровки. Принимает на вход 3 параметра 1 - кодовое слово, 2 - имя файла который дешифровать 3 - массив словарь(если не указать берётся по умолчанию)"
    # Словарь по умолчанию(Массив с набором используемых символов)
    __mas = ['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф',
             'х', 'ц', 'ч', 'ш', 'щ', 'ь', 'ы', 'ъ', 'э', 'ю', 'я', 'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й',
             'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ь', 'Ы', 'Ъ', 'Э', 'Ю', 'Я',
             'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
             'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
             'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '!', '/', '#', '.', ':', '&', '?', '-', '—', ',', '~', '1', '2', '3',
             '4', '5', '6', '7', '8', '9', '0', ' ', "]"]

    @ staticmethod
    def __validValue(s, m):
        # Проверяю присутствует ли символ в словаре
        for i in range(len(s)):
            if m.count(s[i]) == 0:
                print('В введённых данных используется недопустимый символ!')
                exit()

    # Функция дешифрования строки
    # 1 - словарь 2-строка 3-кодовое слово
    @staticmethod
    def __shifr(m, s, k):
        # Счётчик длины кодового слова
        n = 0
        # Создаю матрицу 2 X длина строки
        mas1 = np.zeros((2, len(s)))
        # Проверка данных на присутствие в словаре(массиве с символами)
        vijDech.__validValue(s, m)
        # Проверка данных на присутствие в словаре(массиве с символами)
        vijDech.__validValue(k, m)
        # Заполняю первую строку матрицы порядковыми номерами элементов
        for i in range(len(s)):
            mas1[0][i] = m.index(s[i])
        # Заполняю вторую строку матрицы порядковыми элементами кодового слова
        for i in range(len(mas1[1])):
            if n >= len(k): n = 0
            mas1[1][i] = m.index(k[n])
            n += 1
        # Вычитаю из первой строки вторую строку
        for i in range(len(mas1[1])):
            mas1[0][i] -= (mas1[1][i])
            # По модулю
            if mas1[0][i] < 0: mas1[0][i] += (len(m) - 1)
        s = ''
        # Записываю дешефрованные символы в строку
        for i in range(len(mas1[0])):
            s += m[int(mas1[0][i])]
        # Возвращаяю строку
        return s

    # Функция чтения из файла строк, дешефровка и вывод на экран.
    @staticmethod
    def shifrVijDech(k, r, m = __mas):
        # Открываю файл на чтение
        f = open(r)
        # Построчно считываю из файла данные и дешефрую
        print("--------------------------------")
        for line in f:
            l = line
            # Удаляю символы переноса строки если они есть
            l = l[:-1] if l.find("\n") != -1 else l
            # Вывод на экран результата дешефровки строки
            print(vijDech.__shifr(m, l, k))
        # Закрываю файл на чтение
        f.close()
        print("--------------------------------")
        print("Успешно!")


rf = input("Введите название файла, расшифровать: ")
kod = input("Введите кодовое слово: ")
p = vijDech()
p.shifrVijDech(kod, rf)
